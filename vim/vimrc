" Finally figuring out my own vim confuration

" Plugins -----------------------------------------------
call plug#begin()
Plug 'wlangstroth/vim-racket'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'dense-analysis/ale'
Plug 'sheerun/vim-polyglot'
Plug 'lervag/vimtex'
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-surround'
Plug 'vim-test/vim-test'
Plug 'airblade/vim-gitgutter'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install() } }
call plug#end()

" Leader
let mapleader=","

" Backspace ---------------------------------------------
set backspace=indent,eol,start

" Colors ------------------------------------------------
syntax enable         " How does one not use syntax highlighting??
colorscheme gruvbox   
if $ITERM_PROFILE == 'gruvbox-dark'
    set background=dark
else
    set background=light
endif

" Sounds ------------------------------------------------
set belloff=all    " Bell sounds are so annoying


" Spaces and Tabs ---------------------------------------
set tabstop=4      " spaces shown for <TAB>
set softtabstop=4  " render this many spaces when inserting <TAB>
set shiftwidth=4   " insert that many spaces when entering onto new indent
set expandtab      " insert spaces instead of <TAB>s
" set textwidth=80

autocmd FileType javascript setlocal
            \ tabstop=2
            \ softtabstop=2
            \ shiftwidth=2


" UI Config ---------------------------------------------
set number         " display line numbers
set showcmd        " show command in bottom bar
set ruler          " show row/col numbers in the status bar

" set cursorline     " underline current line
filetype plugin indent on " filetype detection and loading of lang specific files

set wildmenu       " visual autocomplete for command menu
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.DS_Store
set lazyredraw     " don't redraw during macros
set showmatch      " show matching [{()}]
set so=7           " set lines buffer from the top/botom of the screen


" Search ------------------------------------------------
set incsearch      " search as characters are entered
set hlsearch       " highlight matches
nnoremap <leader><space> :nohlsearch<CR> " unhighlight


" Folding -----------------------------------------------
set foldmethod=syntax " base it off the language
set foldenable        " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10    " 10 nested fold max
nnoremap <space> za   " space opens/closes folds


" Random mappings ---------------------------------------
map <F9> :!make<CR>


" Tabs and Buffers---------------------------------------
map <leader>tn :tabnew 
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>t<leader> :tabnext 
map <leader><leader> :tabnext<cr>

" open a scratch buffer
map <leader>b :tabnew /tmp/buffer<cr>

" Make --------------------------------------------------
map <leader>m :make<cr>

" Autoclosing  ------------------------------------------
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O}}}])'"

" ALE  --------------------------------------------------
let g:ale_linters = {
\   'cpp': ['ccls'],
\   'python': ['flake8'],
\   'javascript': ['eslint'],
\   'rust': ['rls'],
\}

let g:ale_fixers = {
\   'python': ['black'],
\   'javascript': ['eslint'],
\   'rust': ['rustfmt'],
\   'c': ['clang-format'],
\   'cpp': ['clang-format'],
\}

nmap <leader>g :ALEFix<cr>

" C headers
let g:ale_c_clang_options="-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"

" Treat ejs files like html I guess
au BufNewFile,BufRead *.ejs set filetype=html

" Latex  ------------------------------------------------
let g:tex_flavor="latex"
let g:vimtex_view_method='skim'
set concealcursor=""
set conceallevel=1
let g:tex_conceal='abdmg'

let g:indentLine_fileTypeExclude = ['tex']
let g:indentLine_color_term = 239

" random

let g:ale_python_black_options = '--line-length 80'

set t_ut=

" Test --------------------------------------------------
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" CoC ---------------------------------------------------

let g:coc_global_extensions = [
\ 'coc-sh',
\ 'coc-html',
\ 'coc-json',
\ 'coc-metals',
\ 'coc-pyright',
\ 'coc-rust-analyzer',
\ 'coc-tsserver',
\ 'coc-vimtex',
\ ]

function! s:GoToDefinition()
  if CocAction('jumpDefinition', 'tabe')
    return v:true
  endif

  let ret = execute("silent! normal \<C-]>")
  if ret =~ "Error" || ret =~ "错误"
    call searchdecl(expand('<cword>'))
  endif
endfunction

nmap <silent> gd :call <SID>GoToDefinition()<CR>

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" FZF ---------------------------------------------------
nmap <silent> <C-f> :Rg<CR>
nmap <silent> <Leader>f :Files<CR>
